vcl 4.0;

import std;

backend default {
  .host = "127.0.0.1";
  .port = "{{ varnish_backend_port }}";
}

acl purge {
  "localhost";
  "127.0.0.1";
  "::1";
}

sub vcl_recv {

  {% if not varnish_use_cache %}
  # Bypass Varnish for every request
  return(pass);
  {% endif %}

  # Normalize the host and URL
  set req.http.host = regsub(req.http.host, ":[0-9]+", "");
  set req.url = std.querysort(req.url);
  unset req.http.proxy;

  # Allow banning from IP addresses in the ban ACL
  if (req.method == "BAN") {
    if (!client.ip ~ purge) {
      return (synth(405, "This IP is not allowed to send BAN requests."));
    }
    if (!req.http.x-ban) {
      return (synth(405, "The ban URL must be specified in an X-Ban header."));
    }
    ban("obj.http.x-url ~ " + req.http.x-ban);
    return (synth(200, "Ban added"));
  }

  # Only handle normal HTTP methods, and only cache non-POST requests
  if (req.method != "GET" && req.method != "HEAD" && req.method != "POST") {
    return (pipe);
  }
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }

  # Remove Google Analytics query parameters
  if (req.url ~ "(\?|&)({{ varnish_google_analytics_params | join('|') }})=") {
    set req.url = regsuball(req.url, "&({{ varnish_google_analytics_params | join('|') }})=([A-z0-9_\-\.%25]+)", "");
    set req.url = regsuball(req.url, "\?({{ varnish_google_analytics_params | join('|') }})=([A-z0-9_\-\.%25]+)", "?");
    set req.url = regsub(req.url, "\?&", "?");
    set req.url = regsub(req.url, "\?$", "");
  }

  # Strip hashes and trailing query-parameter indicators
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Remove Google Analytics cookies
  {% for regex in varnish_google_analytics_cookie_regexes %}
  set req.http.cookie = regsuball(req.http.cookie, "{{ regex }}=[^;]+(; )?", "");
  {% endfor %}

  # Remove a ";" prefix in the cookie if present
  set req.http.cookie = regsuball(req.http.cookie, "^;\s*", "");

  # Unset cookies entirely if the cookie string contains only whitespace
  if (req.http.cookie ~ "^\s*$") {
    unset req.http.cookie;
  }

  # Don't cache any requests with authorization headers
  if (req.http.Authorization) {
    return (pass);
  }

  # Attempt to store the request in the cache
  return (hash);

}

sub vcl_hash {

  # Use a bash hash of the URL and IP address
  hash_data(req.url);
  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  # Hash cookies for requests that have them
  if (req.http.cookie) {
    hash_data(req.http.cookie);
  }

}

sub vcl_hit {

  # Serve cached responses with a positive TTL
  if (obj.ttl >= 0s) {
    return (deliver);
  }

  # Get a response from the backend for expired responses
  return (fetch);

}

sub vcl_miss {

  # Get a response from the backend if the request is a cache miss
  return (fetch);

}

sub vcl_backend_response {

  # Abort caching of server errors
  if (beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504) {
    return (abandon);
  }

  # Enable serving of stale content if the backend goes down
  set beresp.grace = 1h;

  # Set TTLs for responses as follows:
  #
  # 1.) Mark all 404 responses as cacheable for the default duration.
  # 2.) Use the value of the Surrogate-Control header's max-age value to set the
  #     internal TTL for any responses that use this header.
  # 3.) Mark any other responses that lack surrogate instructions and should not
  #     be stored as uncacheable for the default duration.
  if (beresp.status == 404) {
    set beresp.ttl = {{ varnish_default_ttl }};
  } else if (beresp.http.surrogate-control && beresp.http.surrogate-control ~ "max-age") {
    set beresp.ttl = std.duration(regsub(beresp.http.surrogate-control, "max-age=(\d+)", "\1s"), {{ varnish_default_ttl }});
  } else if (beresp.http.cache-control ~ "(no-store|private)" || beresp.http.pragma ~ "no-cache") {
    set beresp.uncacheable = true;
    set beresp.ttl = {{ varnish_default_ttl }};
  }

  # Set the request URL on the object to enable lurker-friendly bans
  set beresp.http.x-url = bereq.url;

  return (deliver);

}

sub vcl_deliver {

  # Remove debug headers
  unset resp.http.via;
  unset resp.http.x-varnish;

  # Strip the ban URL
  unset resp.http.x-url;

  # Remove the Surrogate-Control header provided by the backend response
  unset resp.http.surrogate-control;

  return(deliver);

}
