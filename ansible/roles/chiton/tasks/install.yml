---
- name: create all required application directories
  file:
    path: "{{ item }}"
    owner: "{{ chiton_user }}"
    group: "{{ chiton_group }}"
    mode: 0755
    state: directory
  with_items:
    - "{{ chiton_root_dir }}"
    - "{{ chiton_source_dir }}"
    - "{{ chiton_var_dir }}"
    - "{{ chiton_log_dir }}"
    - "{{ chiton_run_dir }}"
    - "{{ chiton_versions_dir }}"
    - "{{ chiton_backups_dir }}"
    - "{{ chiton_config_dir }}"
    - "{{ chiton_scripts_dir }}"
    - "{{ chiton_package_cache_dir }}"
    - "{{ chiton_media_dir }}"

- name: install requirements for building Python dependencies and extensions
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - libpcre3
    - libpcre3-dev
    - libyaml-dev

- name: fetch the source code
  git:
    accept_hostkey: yes
    clone: yes
    dest: "{{ chiton_source_dir }}"
    repo: git@github.com:justinlocsei/chiton.git
    update: yes
    version: "{{ chiton_git_ref }}"
  become: yes
  become_user: "{{ chiton_user }}"
  register: chiton_source_fetch

- name: determine the target version using the rollback delta
  shell: ls -t {{ chiton_versions_dir | quote }} | head -n {{ chiton_rollback_delta + 1 }} | tail -n 1
  register: chiton_target_version_query
  changed_when: False

- name: set the target version
  set_fact:
    chiton_target_version: "{{ chiton_rollback_delta | ternary(chiton_target_version_query.stdout, chiton_source_fetch.after) }}"

- name: set the directory for the current version
  set_fact:
    chiton_current_version_dir: "{{ chiton_versions_dir }}/{{ chiton_current_version or chiton_target_version }}"

- name: set the paths to functional subdirectories for the current version
  set_fact:
    chiton_current_version_assets_dir: "{{ chiton_current_version_dir }}/{{ chiton_assets_dir_name }}"
    chiton_current_version_public_dir: "{{ chiton_current_version_dir }}/{{ chiton_public_files_dir_name }}"
    chiton_current_version_virtualenv_dir: "{{ chiton_current_version_dir }}/{{ chiton_virtualenv_dir_name }}"

- name: set the path to binaries for the current version
  set_fact:
    chiton_current_version_manage_file: "{{ chiton_current_version_virtualenv_dir }}/{{ chiton_current_version_manage_relative_path }}"
    chiton_current_version_pip_bin: "{{ chiton_current_version_virtualenv_dir }}/bin/{{ chiton_pip_bin_name }}"
    chiton_current_version_python_bin: "{{ chiton_current_version_virtualenv_dir }}/bin/{{ chiton_python_bin_name }}"

- name: ensure that the current version's directory exists
  file:
    path: "{{ chiton_current_version_dir }}"
    owner: "{{ chiton_user }}"
    group: "{{ chiton_group }}"
    mode: 0755
    state: directory

- become: yes
  become_user: "{{ chiton_user }}"
  block:
    - name: create a virtualenv for server-only Python libraries
      pip:
        name: pip
        version: "{{ chiton_pip_version }}"
        executable: "{{ chiton_pip_bin_name }}"
        virtualenv: "{{ chiton_server_virtualenv_dir }}"
        virtualenv_python: "{{ chiton_python_bin_name }}"
        virtualenv_site_packages: no
        state: present

    - name: create a virtualenv for the current version with an updated pip
      pip:
        name: pip
        version: "{{ chiton_pip_version }}"
        executable: "{{ chiton_pip_bin_name }}"
        virtualenv: "{{ chiton_current_version_virtualenv_dir }}"
        virtualenv_python: "{{ chiton_python_bin_name }}"
        virtualenv_site_packages: no
        state: present

    - name: allow wheels to be built via pip
      pip:
        name: wheel
        version: "{{ chiton_wheel_version }}"
        executable: "{{ chiton_pip_bin_name }}"
        virtualenv: "{{ chiton_current_version_virtualenv_dir }}"
        state: present

    - name: build wheels for all requirements
      command: >-
        {{ chiton_current_version_pip_bin | quote }} wheel
        --cache-dir={{ chiton_package_cache_dir | quote }}
        --wheel-dir={{ chiton_wheel_cache_dir | quote }}
        --find-links={{ chiton_wheel_cache_dir | quote }}
        -r {{ chiton_requirements_dir | quote }}/{{ item.file }}
      with_items: "{{ chiton_requirements_files }}"
      when: item.install
      register: chiton_pip_wheel
      changed_when: "'Successfully built' in chiton_pip_wheel.stdout"

    - name: install requirements from the pre-built wheels
      command: >-
        {{ chiton_current_version_pip_bin | quote }} install
        --no-index
        --find-links={{ chiton_wheel_cache_dir | quote }}
        -r {{ chiton_requirements_dir | quote }}/{{ item.file }}
      with_items: "{{ chiton_requirements_files }}"
      when: item.install
      register: chiton_pip_install
      changed_when: "'Installing collected packages' in chiton_pip_install.stdout"
      notify:
        - "{{ item.notify | default(omit) }}"

    - name: install chiton as a package
      command: >-
        {{ chiton_current_version_pip_bin | quote }} install
        {{ chiton_source_dir | quote }}
      register: chiton_source_install
      changed_when: "'Installing collected packages' in chiton_source_install.stdout"
      when: not chiton_allow_development

    - name: install chiton as a symlink
      file:
        src: "{{ chiton_source_dir }}/chiton"
        dest: "{{ chiton_current_version_virtualenv_dir }}/lib/python{{ chiton_python_version }}/site-packages/chiton"
        owner: "{{ chiton_user }}"
        group: "{{ chiton_group }}"
        mode: 0755
        force: yes
        state: link
      when: chiton_allow_development

    - name: install gunicorn
      pip:
        name: gunicorn
        version: 19.6.0
        executable: "{{ chiton_pip_bin_name }}"
        virtualenv: "{{ chiton_server_virtualenv_dir }}"
        state: present
      notify:
        - restart chiton

- name: create directories for assets
  file:
    path: "{{ item }}"
    owner: "{{ chiton_user }}"
    group: "{{ chiton_group }}"
    mode: 0755
    state: directory
  with_items:
    - "{{ chiton_current_version_assets_dir }}"
    - "{{ chiton_current_version_public_dir }}"

- name: create a management command for the current version
  template:
    src: manage.py.j2
    dest: "{{ chiton_current_version_manage_file }}"
    owner: "{{ chiton_user }}"
    group: "{{ chiton_group }}"
    mode: 0755
