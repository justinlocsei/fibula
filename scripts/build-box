#!/usr/bin/env python

import argparse
import json
import os
import re
import shutil
import subprocess
import sys

ROOT_DIR = os.path.realpath(os.path.join(__file__, "..", ".."))
PACKER_DIR = os.path.join(ROOT_DIR, "packer")
PACKER_BUILD_DIR = os.path.join(PACKER_DIR, "build")
PACKER_BOXES_DIR = os.path.join(PACKER_BUILD_DIR, "boxes")
PACKER_ISOS_DIR = os.path.join(PACKER_BUILD_DIR, "isos")
PACKER_TEMP_DIR = os.path.join(PACKER_BUILD_DIR, "temp")
VM_PREFIX = "fibula"


def run():
    """Build a box based on user input."""
    args = parse_args()
    template_path = find_box_template(args.box)
    box_ids = create_box_ids(VM_PREFIX, template_path)

    box_path = build_box(template_path, box_ids)
    add_box_to_vagrant(box_path, box_ids)


def parse_args():
    """Parse the command-line arguments.

    Returns:
        argparse.Namespace: The parsed arguments
    """
    parser = argparse.ArgumentParser(description="Build a box via Packer")
    parser.add_argument("box", metavar="BOX", type=str, help="The name of a Packer template for a box")
    return parser.parse_args()


def find_box_template(name):
    """Locate the template that defines a named box.

    Args:
        name (str): The name of a Packer box

    Returns:
        str: The path to the box's template file
    """
    box = re.sub(r".json$", "", name)
    template = os.path.join(PACKER_DIR, "%s.json" % box)

    if not os.path.isfile(template):
        sys.stderr.write("No box named %s was found at %s\n" % (name, template))
        sys.exit(1)

    return template


def create_box_ids(prefix, template_path):
    """Create a list of VM IDs from a prefix and a Packer template.

    Args:
        prefix (str): The prefix to use for the IDs
        template_path (str): The path to the VM's template

    Returns:
        List[str]: All components of a box ID
    """
    with open(template_path, "r") as template_file:
        template = json.load(template_file)

    return [prefix, template["variables"]["vm_name"]]


def build_box(template_path, box_ids):
    """Create a packer build process for a template.

    Args:
        template_path (str): The path to the box's template file
        box_ids (List[str]): All components of the box's ID

    Returns:
        str: The path to the built box
    """
    box_id = "-".join(box_ids)
    box_path = os.path.join(PACKER_BOXES_DIR, "%s.box" % box_id)
    output_directory = os.path.join(PACKER_TEMP_DIR, box_id)

    for packer_dir in [PACKER_TEMP_DIR, PACKER_BOXES_DIR]:
        if not os.path.isdir(packer_dir):
            os.mkdir(packer_dir, 0755)

    if os.path.isdir(output_directory):
        shutil.rmtree(output_directory)

    packer_args = [
        "packer", "build",
        "-var", "box_path=%s" % box_path,
        "-var", "output_directory=%s" % output_directory,
        template_path
    ]

    packer = subprocess.Popen(
        packer_args,
        env=dict(os.environ, PACKER_CACHE_DIR=PACKER_ISOS_DIR),
        cwd=PACKER_DIR
    )

    try:
        packer.wait()
    except KeyboardInterrupt:
        packer.terminate()
        sys.exit(1)

    if packer.returncode != 0:
        sys.stderr.write("Packer build failed with status %d\n" % packer.returncode)
        sys.exit(1)

    return box_path


def add_box_to_vagrant(box_path, box_ids):
    """Add a box to Vagrant, removing it first if it already exists.

    Args:
        box_path (str): The path to the built box
        box_ids: (List[str]): All components of the box's ID

    Returns:
        bool: Whether the box was added to Vagrant
    """
    box_name = "/".join(box_ids)

    with open(os.devnull, "w") as devnull:
        subprocess.call(
            ["vagrant", "box", "remove", box_name, "--force"],
            stdout=devnull,
            stderr=subprocess.STDOUT
        )

    status = subprocess.call(["vagrant", "box", "add", box_path, "--name", box_name])
    return status == 0


if __name__ == "__main__":
    run()
